import cv2
import numpy as np
from tkinter import messagebox
from time import strftime
from datetime import datetime
import face_recognition
import pymysql
from tkinter import *
from tkinter import ttk
from PIL import Image, ImageTk

class Face_Recognition:

    def __init__(self, root):
        self.root = root
        self.root.geometry("1366x768+0+0")
        self.root.title("Face Recognition Panel")

        img = Image.open(r"E:\Project-II\Images_GUI\banner.jpg")
        img = img.resize((1366, 130), Image.ANTIALIAS)
        self.photoimg = ImageTk.PhotoImage(img)

        f_lb1 = Label(self.root, image=self.photoimg)
        f_lb1.place(x=0, y=0, width=1366, height=130)

        bg1 = Image.open(r"E:\Project-II\Images_GUI\bg2.jpg")
        bg1 = bg1.resize((1920, 1080), Image.ANTIALIAS)
        self.photobg1 = ImageTk.PhotoImage(bg1)

        bg_img = Label(self.root, image=self.photobg1)
        bg_img.place(x=0, y=130, width=1366, height=768)

        title_lb1 = Label(bg_img, text="Welcome to Face Recognition Panel", font=("verdana", 30, "bold"), bg="white", fg="navyblue")
        title_lb1.place(x=0, y=0, width=1366, height=45)

        std_img_btn = Image.open(r"E:\Project-II\Images_GUI\f_det.jpg")
        std_img_btn = std_img_btn.resize((180, 180), Image.ANTIALIAS)
        self.std_img1 = ImageTk.PhotoImage(std_img_btn)

        std_b1 = Button(bg_img, command=self.face_recog, image=self.std_img1, cursor="hand2")
        std_b1.place(x=600, y=170, width=180, height=180)

        std_b1_1 = Button(bg_img, command=self.face_recog, text="Face Detector", cursor="hand2", font=("tahoma", 15, "bold"), bg="white", fg="navyblue")
        std_b1_1.place(x=600, y=350, width=180, height=45)

    def mark_attendance(self, i, r, n):
        with open("attendance.csv", "a+", newline="\n") as f:
            now = datetime.now()
            d1 = now.strftime("%d/%m/%Y")
            dtString = now.strftime("%H:%M:%S")
            f.writelines(f"\n{i}, {r}, {n}, {dtString}, {d1}, Present")

            #save the detected face as an image
            face_filename = f"detected_faces/{i}_{r}_{n}_{d1}.jpg"
            # cv2.imwrite(data_img, face_image)

    def face_recog(self):
        faceCascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
        clf = cv2.face.LBPHFaceRecognizer_create()
        clf.read("clf.xml")

        videoCap = cv2.VideoCapture(0)

        # Establish a connection to the MySQL database
        conn = pymysql.connect(user='root', password='admin', host='localhost', database='face_recognition', port=3306)
        cursor = conn.cursor()

        while True:
            ret, img = videoCap.read()
            gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            features = faceCascade.detectMultiScale(gray_image, 1.1, 10)

            for (x, y, w, h) in features:
                cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)
                id, predict = clf.predict(gray_image[y:y + h, x:x + w])
                
               
                confidence = int((100 * (1 - predict / 200)))

               
                cursor.execute(f"SELECT Name, Roll_No FROM student WHERE Student_ID = {id}")
                result = cursor.fetchone()

                if result is not None:
                    n, r = result
                    cv2.putText(img, f"Student_ID: {id}", (x, y - 80), cv2.FONT_HERSHEY_COMPLEX, 0.8, (64, 15, 223), 2)
                    cv2.putText(img, f"Name: {n}", (x, y - 55), cv2.FONT_HERSHEY_COMPLEX, 0.8, (64, 15, 223), 2)
                    cv2.putText(img, f"Roll-No: {r}", (x, y - 30), cv2.FONT_HERSHEY_COMPLEX, 0.8, (64, 15, 223), 2)
                    self.mark_attendance(id, r, n, img[y:y + h, x:x + w])
                    # self.mark_attendance(id, r, n)
                else:
                    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 0, 255), 3)
                    cv2.putText(img, "Unknown Face", (x, y - 5), cv2.FONT_HERSHEY_COMPLEX, 0.8, (255, 255, 0), 3)

            cv2.imshow("Face Detector", img)

            if cv2.waitKey(1) == 13:
                break

        # Release the video capture and close the OpenCV windows
        videoCap.release()
        cv2.destroyAllWindows()

        # Close the database connection
        cursor.close()
        conn.close()


if __name__ == "__main__":
    root = Tk()
    obj = Face_Recognition(root)
    root.mainloop()


